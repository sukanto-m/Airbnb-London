{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8521316,"sourceType":"datasetVersion","datasetId":5087976}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-30T07:11:14.599085Z","iopub.execute_input":"2024-05-30T07:11:14.599481Z","iopub.status.idle":"2024-05-30T07:11:15.685542Z","shell.execute_reply.started":"2024-05-30T07:11:14.599434Z","shell.execute_reply":"2024-05-30T07:11:15.684160Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/airbnb-london-listings-data/listings.csv\n/kaggle/input/airbnb-london-listings-data/listings 2.csv\n/kaggle/input/airbnb-london-listings-data/reviews 2.csv\n/kaggle/input/airbnb-london-listings-data/reviews.csv\n/kaggle/input/airbnb-london-listings-data/neighbourhoods.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"listings = pd.read_csv('/kaggle/input/airbnb-london-listings-data/listings.csv')\nreviews = pd.read_csv('/kaggle/input/airbnb-london-listings-data/reviews.csv')\n","metadata":{"execution":{"iopub.status.busy":"2024-05-30T07:11:18.357830Z","iopub.execute_input":"2024-05-30T07:11:18.358492Z","iopub.status.idle":"2024-05-30T07:11:41.643366Z","shell.execute_reply.started":"2024-05-30T07:11:18.358426Z","shell.execute_reply":"2024-05-30T07:11:41.641857Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"listings.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:09:39.052674Z","iopub.execute_input":"2024-05-29T06:09:39.053095Z","iopub.status.idle":"2024-05-29T06:09:39.062373Z","shell.execute_reply.started":"2024-05-29T06:09:39.053025Z","shell.execute_reply":"2024-05-29T06:09:39.060732Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"(90857, 18)"},"metadata":{}}]},{"cell_type":"code","source":"listings.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:09:46.710791Z","iopub.execute_input":"2024-05-29T06:09:46.711236Z","iopub.status.idle":"2024-05-29T06:09:46.791858Z","shell.execute_reply.started":"2024-05-29T06:09:46.711201Z","shell.execute_reply":"2024-05-29T06:09:46.790662Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 90857 entries, 0 to 90856\nData columns (total 18 columns):\n #   Column                          Non-Null Count  Dtype  \n---  ------                          --------------  -----  \n 0   id                              90857 non-null  int64  \n 1   name                            90857 non-null  object \n 2   host_id                         90857 non-null  int64  \n 3   host_name                       90847 non-null  object \n 4   neighbourhood_group             0 non-null      float64\n 5   neighbourhood                   90857 non-null  object \n 6   latitude                        90857 non-null  float64\n 7   longitude                       90857 non-null  float64\n 8   room_type                       90857 non-null  object \n 9   price                           57888 non-null  float64\n 10  minimum_nights                  90857 non-null  int64  \n 11  number_of_reviews               90857 non-null  int64  \n 12  last_review                     65872 non-null  object \n 13  reviews_per_month               65872 non-null  float64\n 14  calculated_host_listings_count  90857 non-null  int64  \n 15  availability_365                90857 non-null  int64  \n 16  number_of_reviews_ltm           90857 non-null  int64  \n 17  license                         0 non-null      float64\ndtypes: float64(6), int64(7), object(5)\nmemory usage: 12.5+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"numeric_cols = listings.select_dtypes(include=[np.number])\nmissing_percentage = numeric_cols.isnull().mean() * 100\nfor column, percentage in missing_percentage.items():\n    print(f\"Average proportion of missing values in {column}: {round(percentage,2)}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:09:49.561295Z","iopub.execute_input":"2024-05-29T06:09:49.561737Z","iopub.status.idle":"2024-05-29T06:09:49.574236Z","shell.execute_reply.started":"2024-05-29T06:09:49.561701Z","shell.execute_reply":"2024-05-29T06:09:49.572987Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Average proportion of missing values in id: 0.0%\nAverage proportion of missing values in host_id: 0.0%\nAverage proportion of missing values in neighbourhood_group: 100.0%\nAverage proportion of missing values in latitude: 0.0%\nAverage proportion of missing values in longitude: 0.0%\nAverage proportion of missing values in price: 36.29%\nAverage proportion of missing values in minimum_nights: 0.0%\nAverage proportion of missing values in number_of_reviews: 0.0%\nAverage proportion of missing values in reviews_per_month: 27.5%\nAverage proportion of missing values in calculated_host_listings_count: 0.0%\nAverage proportion of missing values in availability_365: 0.0%\nAverage proportion of missing values in number_of_reviews_ltm: 0.0%\nAverage proportion of missing values in license: 100.0%\n","output_type":"stream"}]},{"cell_type":"code","source":"numeric_df = listings.select_dtypes(include='number')\ncorrelation_matrix = numeric_df.corr()\nfeature_target_corr = correlation_matrix['price'].sort_values(ascending=False)\nprint(feature_target_corr)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:09:57.445963Z","iopub.execute_input":"2024-05-29T06:09:57.447088Z","iopub.status.idle":"2024-05-29T06:09:57.500982Z","shell.execute_reply.started":"2024-05-29T06:09:57.447020Z","shell.execute_reply":"2024-05-29T06:09:57.499903Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"price                             1.000000\ncalculated_host_listings_count    0.061232\navailability_365                  0.039736\nminimum_nights                    0.024373\nlatitude                         -0.002465\nhost_id                          -0.013628\nid                               -0.014612\nlongitude                        -0.034916\nnumber_of_reviews                -0.043198\nreviews_per_month                -0.052799\nnumber_of_reviews_ltm            -0.062066\nneighbourhood_group                    NaN\nlicense                                NaN\nName: price, dtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n\nimputer = SimpleImputer(strategy='mean')\n\nlistings['price'] = imputer.fit_transform(listings[['price']])\n\nlistings.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-30T07:12:35.523586Z","iopub.execute_input":"2024-05-30T07:12:35.524593Z","iopub.status.idle":"2024-05-30T07:12:36.389993Z","shell.execute_reply.started":"2024-05-30T07:12:35.524556Z","shell.execute_reply":"2024-05-30T07:12:36.388623Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 90857 entries, 0 to 90856\nData columns (total 18 columns):\n #   Column                          Non-Null Count  Dtype  \n---  ------                          --------------  -----  \n 0   id                              90857 non-null  int64  \n 1   name                            90857 non-null  object \n 2   host_id                         90857 non-null  int64  \n 3   host_name                       90847 non-null  object \n 4   neighbourhood_group             0 non-null      float64\n 5   neighbourhood                   90857 non-null  object \n 6   latitude                        90857 non-null  float64\n 7   longitude                       90857 non-null  float64\n 8   room_type                       90857 non-null  object \n 9   price                           90857 non-null  float64\n 10  minimum_nights                  90857 non-null  int64  \n 11  number_of_reviews               90857 non-null  int64  \n 12  last_review                     65872 non-null  object \n 13  reviews_per_month               65872 non-null  float64\n 14  calculated_host_listings_count  90857 non-null  int64  \n 15  availability_365                90857 non-null  int64  \n 16  number_of_reviews_ltm           90857 non-null  int64  \n 17  license                         0 non-null      float64\ndtypes: float64(6), int64(7), object(5)\nmemory usage: 12.5+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"X = listings[['calculated_host_listings_count', 'availability_365']]\n\ny = listings['price'].values\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nprint(X_train.shape)\nprint(y_train.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-30T06:25:56.396012Z","iopub.execute_input":"2024-05-30T06:25:56.396456Z","iopub.status.idle":"2024-05-30T06:25:56.415895Z","shell.execute_reply.started":"2024-05-30T06:25:56.396421Z","shell.execute_reply":"2024-05-30T06:25:56.414573Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"(63599, 2)\n(63599,)\n","output_type":"stream"}]},{"cell_type":"code","source":"model = LinearRegression()\nmodel.fit(X_train, y_train)\nmodel.coef_","metadata":{"execution":{"iopub.status.busy":"2024-05-30T06:25:57.539158Z","iopub.execute_input":"2024-05-30T06:25:57.539539Z","iopub.status.idle":"2024-05-30T06:25:57.580027Z","shell.execute_reply.started":"2024-05-30T06:25:57.539511Z","shell.execute_reply":"2024-05-30T06:25:57.579169Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"array([0.20434212, 0.07619351])"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error\n\ny_pred = model.predict(X_test)\nmean_squared_error(y_test, y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-05-30T06:26:00.657513Z","iopub.execute_input":"2024-05-30T06:26:00.658648Z","iopub.status.idle":"2024-05-30T06:26:00.677015Z","shell.execute_reply.started":"2024-05-30T06:26:00.658607Z","shell.execute_reply":"2024-05-30T06:26:00.674494Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"157445.032087312"},"metadata":{}}]},{"cell_type":"code","source":"y_pred[0]","metadata":{"execution":{"iopub.status.busy":"2024-05-30T06:26:02.421228Z","iopub.execute_input":"2024-05-30T06:26:02.421653Z","iopub.status.idle":"2024-05-30T06:26:02.431279Z","shell.execute_reply.started":"2024-05-30T06:26:02.421622Z","shell.execute_reply":"2024-05-30T06:26:02.429453Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"172.3417963167738"},"metadata":{}}]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1)  \n])\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')","metadata":{"execution":{"iopub.status.busy":"2024-05-30T06:26:04.676597Z","iopub.execute_input":"2024-05-30T06:26:04.676982Z","iopub.status.idle":"2024-05-30T06:26:19.377342Z","shell.execute_reply.started":"2024-05-30T06:26:04.676954Z","shell.execute_reply":"2024-05-30T06:26:19.376389Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stderr","text":"2024-05-30 06:26:07.033260: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-05-30 06:26:07.033409: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-05-30 06:26:07.203816: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:86: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"}]},{"cell_type":"code","source":"early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n\n\nhistory = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2, callbacks=[early_stopping])\nloss = model.evaluate(X_test, y_test)\nprint('Test Loss:', loss)","metadata":{"execution":{"iopub.status.busy":"2024-05-30T06:26:29.721974Z","iopub.execute_input":"2024-05-30T06:26:29.722816Z","iopub.status.idle":"2024-05-30T06:28:24.410574Z","shell.execute_reply.started":"2024-05-30T06:26:29.722777Z","shell.execute_reply":"2024-05-30T06:28:24.409255Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Epoch 1/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 61266.6289 - val_loss: 41638.0469\nEpoch 2/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 61051.8711 - val_loss: 40690.4414\nEpoch 3/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 99785.6016 - val_loss: 40373.6484\nEpoch 4/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 107669.2422 - val_loss: 40396.5352\nEpoch 5/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 66476.8984 - val_loss: 40257.1133\nEpoch 6/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 130831.1094 - val_loss: 40095.4961\nEpoch 7/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 65941.8359 - val_loss: 40148.1016\nEpoch 8/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 83513.9219 - val_loss: 40188.9922\nEpoch 9/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 95488.2578 - val_loss: 40085.9609\nEpoch 10/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 89111.5234 - val_loss: 40147.7852\nEpoch 11/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 79092.1250 - val_loss: 40108.8750\nEpoch 12/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 112864.9531 - val_loss: 40344.1211\nEpoch 13/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 145019.6094 - val_loss: 40554.2539\nEpoch 14/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 102585.5234 - val_loss: 40043.9453\nEpoch 15/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 70144.3594 - val_loss: 40316.2422\nEpoch 16/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 60772.6562 - val_loss: 56365.3945\nEpoch 17/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 73370.0703 - val_loss: 40230.9219\nEpoch 18/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 77767.8438 - val_loss: 40344.4453\nEpoch 19/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 64086.7344 - val_loss: 42634.1836\nEpoch 20/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 59561.6797 - val_loss: 40538.3555\nEpoch 21/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 62904.9609 - val_loss: 40125.3594\nEpoch 22/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 196978.7031 - val_loss: 40065.0234\nEpoch 23/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 164566.4219 - val_loss: 40053.4102\nEpoch 24/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 67194.9297 - val_loss: 40092.2539\n\u001b[1m852/852\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - loss: 68585.9219\nTest Loss: 157179.140625\n","output_type":"stream"}]},{"cell_type":"code","source":"listings['room_type'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-30T06:32:59.777587Z","iopub.execute_input":"2024-05-30T06:32:59.778138Z","iopub.status.idle":"2024-05-30T06:32:59.817864Z","shell.execute_reply.started":"2024-05-30T06:32:59.778071Z","shell.execute_reply":"2024-05-30T06:32:59.816163Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"room_type\nEntire home/apt    57263\nPrivate room       32954\nShared room          459\nHotel room           181\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"listings['neighbourhood'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-30T06:33:00.707594Z","iopub.execute_input":"2024-05-30T06:33:00.708288Z","iopub.status.idle":"2024-05-30T06:33:00.736648Z","shell.execute_reply.started":"2024-05-30T06:33:00.708098Z","shell.execute_reply":"2024-05-30T06:33:00.735242Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"neighbourhood\nWestminster               10246\nTower Hamlets              7257\nHackney                    6280\nCamden                     5948\nKensington and Chelsea     5944\nSouthwark                  5084\nLambeth                    4900\nIslington                  4873\nWandsworth                 4681\nHammersmith and Fulham     3897\nBrent                      2902\nLewisham                   2668\nNewham                     2437\nHaringey                   2423\nBarnet                     2287\nEaling                     2219\nGreenwich                  2027\nWaltham Forest             1840\nCroydon                    1579\nMerton                     1513\nHounslow                   1320\nRichmond upon Thames       1269\nRedbridge                   937\nHillingdon                  876\nEnfield                     837\nBromley                     824\nKingston upon Thames        683\nBarking and Dagenham        634\nBexley                      565\nHarrow                      551\nCity of London              542\nHavering                    436\nSutton                      378\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import OneHotEncoder, StandardScaler\n\nencoder = OneHotEncoder(sparse=False)\nencoded_category1 = encoder.fit_transform(listings[['neighbourhood']])\nencoded_category2 = encoder.fit_transform(listings[['room_type']])\n\nscaler = StandardScaler()\n\nscaled_numerical =  scaler.fit_transform(listings[['calculated_host_listings_count', 'availability_365']])\n\nX = np.hstack([encoded_category1, encoded_category2, scaled_numerical])\ny = listings['price'].values\n\nprint(X.shape)\nprint(y.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-30T07:13:15.997915Z","iopub.execute_input":"2024-05-30T07:13:15.999206Z","iopub.status.idle":"2024-05-30T07:13:16.103513Z","shell.execute_reply.started":"2024-05-30T07:13:15.999150Z","shell.execute_reply":"2024-05-30T07:13:16.102137Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"(90857, 39)\n(90857,)\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Build the neural network model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1)  # Output layer\n])\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# Define early stopping callback\nearly_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n\n# Train the model\nhistory = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2, callbacks=[early_stopping])\n\n# Evaluate the model on the test data\nloss = model.evaluate(X_test, y_test)\nprint('Test Loss:', loss)","metadata":{"execution":{"iopub.status.busy":"2024-05-30T06:33:07.960269Z","iopub.execute_input":"2024-05-30T06:33:07.960759Z","iopub.status.idle":"2024-05-30T06:35:37.337344Z","shell.execute_reply.started":"2024-05-30T06:33:07.960714Z","shell.execute_reply":"2024-05-30T06:35:37.336104Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Epoch 1/100\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:86: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 206461.4062 - val_loss: 36554.1016\nEpoch 2/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 82748.8828 - val_loss: 36572.5234\nEpoch 3/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 167010.1562 - val_loss: 36501.9961\nEpoch 4/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 384363.3125 - val_loss: 36324.7539\nEpoch 5/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 97841.5859 - val_loss: 36264.4961\nEpoch 6/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 84392.6953 - val_loss: 36358.1289\nEpoch 7/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 84011.4062 - val_loss: 36447.3047\nEpoch 8/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 174188.1094 - val_loss: 36691.3594\nEpoch 9/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 341155.7188 - val_loss: 36113.1797\nEpoch 10/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 91576.8750 - val_loss: 36680.4844\nEpoch 11/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 74723.0547 - val_loss: 36252.6016\nEpoch 12/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 149555.7969 - val_loss: 36046.4180\nEpoch 13/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 165314.3438 - val_loss: 36195.1602\nEpoch 14/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 237797.7031 - val_loss: 36006.6602\nEpoch 15/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 92085.9297 - val_loss: 35908.1758\nEpoch 16/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 116499.6016 - val_loss: 35907.6602\nEpoch 17/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 243096.2344 - val_loss: 35867.5234\nEpoch 18/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 88995.6797 - val_loss: 36061.4648\nEpoch 19/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 133614.1719 - val_loss: 35919.2852\nEpoch 20/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 176540.8906 - val_loss: 39587.5234\nEpoch 21/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 185575.5625 - val_loss: 35862.2383\nEpoch 22/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 83251.6328 - val_loss: 35907.6328\nEpoch 23/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 143188.0781 - val_loss: 35787.2539\nEpoch 24/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 118102.0703 - val_loss: 35833.7266\nEpoch 25/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 108412.8594 - val_loss: 35863.8789\nEpoch 26/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 169467.2500 - val_loss: 35823.8594\nEpoch 27/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 77846.8750 - val_loss: 35982.5039\nEpoch 28/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 78894.6562 - val_loss: 35922.3320\nEpoch 29/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 124503.9062 - val_loss: 35908.2891\nEpoch 30/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 82102.7578 - val_loss: 35893.4766\nEpoch 31/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 135343.8125 - val_loss: 35838.7852\nEpoch 32/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 92570.9688 - val_loss: 36140.1758\nEpoch 33/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 221910.4688 - val_loss: 35904.2227\n\u001b[1m568/568\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - loss: 36811.6133\nTest Loss: 34416.83984375\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\ny_pred = model.predict(X_test).flatten()\nresiduals = y_test - y_pred\nprint(y_test.shape)\nprint(y_pred.shape)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-30T06:40:35.630370Z","iopub.execute_input":"2024-05-30T06:40:35.630944Z","iopub.status.idle":"2024-05-30T06:40:37.485506Z","shell.execute_reply.started":"2024-05-30T06:40:35.630904Z","shell.execute_reply":"2024-05-30T06:40:37.484222Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"\u001b[1m568/568\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n(18172,)\n(18172,)\n","output_type":"stream"}]},{"cell_type":"code","source":"y_pred","metadata":{"execution":{"iopub.status.busy":"2024-05-30T06:40:39.215962Z","iopub.execute_input":"2024-05-30T06:40:39.216500Z","iopub.status.idle":"2024-05-30T06:40:39.226840Z","shell.execute_reply.started":"2024-05-30T06:40:39.216459Z","shell.execute_reply":"2024-05-30T06:40:39.224455Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"array([ 56.29843, 167.5727 , 287.38242, ..., 192.92812,  63.84666,\n       168.43422], dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nplt.scatter(y_test, residuals)\nplt.axhline(y=0, color='r', linestyle='--')\nplt.xlabel('True Values')\nplt.ylabel('Residuals')\nplt.title('Residuals vs True Values')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-30T06:40:42.150112Z","iopub.execute_input":"2024-05-30T06:40:42.150611Z","iopub.status.idle":"2024-05-30T06:40:42.588740Z","shell.execute_reply.started":"2024-05-30T06:40:42.150578Z","shell.execute_reply":"2024-05-30T06:40:42.587191Z"},"trusted":true},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"mean_underprediction = np.mean(residuals[residuals < 0])\nprint(f'Mean Underprediction: {mean_underprediction}')","metadata":{"execution":{"iopub.status.busy":"2024-05-30T06:40:50.563656Z","iopub.execute_input":"2024-05-30T06:40:50.564224Z","iopub.status.idle":"2024-05-30T06:40:50.574338Z","shell.execute_reply.started":"2024-05-30T06:40:50.564177Z","shell.execute_reply":"2024-05-30T06:40:50.571864Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Mean Underprediction: -50.80866702726605\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\nX = listings[['neighbourhood', 'room_type', 'calculated_host_listings_count', 'availability_365']]\ny = listings['price']\n\nnumeric_features = ['calculated_host_listings_count', 'availability_365']\nnumeric_transformer = Pipeline(steps=[\n    ('scaler', StandardScaler())\n])\n\ncategorical_features = ['neighbourhood', 'room_type']\ncategorical_transformer = Pipeline(steps=[\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Column transformer to apply the transformations\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)\n    ])\n\n# Define the model\nmodel = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))\n])\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Generate predictions\ny_pred = model.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T07:04:39.404093Z","iopub.execute_input":"2024-05-29T07:04:39.404568Z","iopub.status.idle":"2024-05-29T07:09:01.644591Z","shell.execute_reply.started":"2024-05-29T07:04:39.404534Z","shell.execute_reply":"2024-05-29T07:09:01.643274Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"mse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(f'Mean Squared Error: {mse}')\nprint(f'R-squared: {r2}')\n\n# Residual analysis\nresiduals = y_test - y_pred\n\nplt.figure(figsize=(10, 6))\nplt.scatter(y_test, residuals)\nplt.axhline(y=0, color='r', linestyle='--')\nplt.xlabel('True Values')\nplt.ylabel('Residuals')\nplt.title('Residuals vs True Values')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T07:27:13.030791Z","iopub.execute_input":"2024-05-29T07:27:13.033194Z","iopub.status.idle":"2024-05-29T07:27:13.386256Z","shell.execute_reply.started":"2024-05-29T07:27:13.033139Z","shell.execute_reply":"2024-05-29T07:27:13.384846Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"Mean Squared Error: 45121.12014534064\nR-squared: -0.1563274119613094\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}