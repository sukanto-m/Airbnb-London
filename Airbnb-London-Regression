{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8521316,"sourceType":"datasetVersion","datasetId":5087976}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-28T05:55:22.359083Z","iopub.execute_input":"2024-05-28T05:55:22.359450Z","iopub.status.idle":"2024-05-28T05:55:23.401427Z","shell.execute_reply.started":"2024-05-28T05:55:22.359421Z","shell.execute_reply":"2024-05-28T05:55:23.400200Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/airbnb-london-listings-data/listings.csv\n/kaggle/input/airbnb-london-listings-data/listings 2.csv\n/kaggle/input/airbnb-london-listings-data/reviews 2.csv\n/kaggle/input/airbnb-london-listings-data/reviews.csv\n/kaggle/input/airbnb-london-listings-data/neighbourhoods.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"listings = pd.read_csv('/kaggle/input/airbnb-london-listings-data/listings.csv')\nlistings2 = pd.read_csv('/kaggle/input/airbnb-london-listings-data/listings 2.csv')\nreviews = pd.read_csv('/kaggle/input/airbnb-london-listings-data/reviews.csv')\nreviews2 = pd.read_csv('/kaggle/input/airbnb-london-listings-data/reviews 2.csv')","metadata":{"execution":{"iopub.status.busy":"2024-05-28T06:35:16.517088Z","iopub.execute_input":"2024-05-28T06:35:16.517502Z","iopub.status.idle":"2024-05-28T06:35:31.765266Z","shell.execute_reply.started":"2024-05-28T06:35:16.517468Z","shell.execute_reply":"2024-05-28T06:35:31.764102Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"listings.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-28T06:35:33.876075Z","iopub.execute_input":"2024-05-28T06:35:33.876493Z","iopub.status.idle":"2024-05-28T06:35:33.883487Z","shell.execute_reply.started":"2024-05-28T06:35:33.876459Z","shell.execute_reply":"2024-05-28T06:35:33.882368Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"(90857, 18)"},"metadata":{}}]},{"cell_type":"code","source":"listings.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-28T06:35:34.618952Z","iopub.execute_input":"2024-05-28T06:35:34.619399Z","iopub.status.idle":"2024-05-28T06:35:34.682382Z","shell.execute_reply.started":"2024-05-28T06:35:34.619364Z","shell.execute_reply":"2024-05-28T06:35:34.681031Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 90857 entries, 0 to 90856\nData columns (total 18 columns):\n #   Column                          Non-Null Count  Dtype  \n---  ------                          --------------  -----  \n 0   id                              90857 non-null  int64  \n 1   name                            90857 non-null  object \n 2   host_id                         90857 non-null  int64  \n 3   host_name                       90847 non-null  object \n 4   neighbourhood_group             0 non-null      float64\n 5   neighbourhood                   90857 non-null  object \n 6   latitude                        90857 non-null  float64\n 7   longitude                       90857 non-null  float64\n 8   room_type                       90857 non-null  object \n 9   price                           57888 non-null  float64\n 10  minimum_nights                  90857 non-null  int64  \n 11  number_of_reviews               90857 non-null  int64  \n 12  last_review                     65872 non-null  object \n 13  reviews_per_month               65872 non-null  float64\n 14  calculated_host_listings_count  90857 non-null  int64  \n 15  availability_365                90857 non-null  int64  \n 16  number_of_reviews_ltm           90857 non-null  int64  \n 17  license                         0 non-null      float64\ndtypes: float64(6), int64(7), object(5)\nmemory usage: 12.5+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"numeric_cols = listings.select_dtypes(include=[np.number])\nmissing_percentage = numeric_cols.isnull().mean() * 100\nfor column, percentage in missing_percentage.items():\n    print(f\"Average proportion of missing values in {column}: {round(percentage,2)}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-28T06:35:35.498404Z","iopub.execute_input":"2024-05-28T06:35:35.498816Z","iopub.status.idle":"2024-05-28T06:35:35.511186Z","shell.execute_reply.started":"2024-05-28T06:35:35.498771Z","shell.execute_reply":"2024-05-28T06:35:35.509868Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"Average proportion of missing values in id: 0.0%\nAverage proportion of missing values in host_id: 0.0%\nAverage proportion of missing values in neighbourhood_group: 100.0%\nAverage proportion of missing values in latitude: 0.0%\nAverage proportion of missing values in longitude: 0.0%\nAverage proportion of missing values in price: 36.29%\nAverage proportion of missing values in minimum_nights: 0.0%\nAverage proportion of missing values in number_of_reviews: 0.0%\nAverage proportion of missing values in reviews_per_month: 27.5%\nAverage proportion of missing values in calculated_host_listings_count: 0.0%\nAverage proportion of missing values in availability_365: 0.0%\nAverage proportion of missing values in number_of_reviews_ltm: 0.0%\nAverage proportion of missing values in license: 100.0%\n","output_type":"stream"}]},{"cell_type":"code","source":"numeric_df = listings.select_dtypes(include='number')\ncorrelation_matrix = numeric_df.corr()\nfeature_target_corr = correlation_matrix['price'].sort_values(ascending=False)\nprint(feature_target_corr)","metadata":{"execution":{"iopub.status.busy":"2024-05-28T07:01:46.217191Z","iopub.execute_input":"2024-05-28T07:01:46.217971Z","iopub.status.idle":"2024-05-28T07:01:46.269095Z","shell.execute_reply.started":"2024-05-28T07:01:46.217929Z","shell.execute_reply":"2024-05-28T07:01:46.268059Z"},"trusted":true},"execution_count":66,"outputs":[{"name":"stdout","text":"price                             1.000000\ncalculated_host_listings_count    0.040673\navailability_365                  0.028603\nminimum_nights                    0.014653\nlatitude                         -0.001998\nid                               -0.011266\nhost_id                          -0.011671\nlongitude                        -0.029211\nnumber_of_reviews                -0.039603\nreviews_per_month                -0.045122\nnumber_of_reviews_ltm            -0.057562\nneighbourhood_group                    NaN\nlicense                                NaN\nName: price, dtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nX = listings[['calculated_host_listings_count', 'availability_365']]\ny = listings['price'].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nprint(X_train.shape)\nprint(y_train.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-28T07:03:45.708198Z","iopub.execute_input":"2024-05-28T07:03:45.708968Z","iopub.status.idle":"2024-05-28T07:03:45.725124Z","shell.execute_reply.started":"2024-05-28T07:03:45.708931Z","shell.execute_reply":"2024-05-28T07:03:45.723617Z"},"trusted":true},"execution_count":67,"outputs":[{"name":"stdout","text":"(63599, 2)\n(63599,)\n","output_type":"stream"}]},{"cell_type":"code","source":"model = LinearRegression()\nmodel.fit(X_train, y_train)\nmodel.coef_","metadata":{"execution":{"iopub.status.busy":"2024-05-28T07:03:56.539555Z","iopub.execute_input":"2024-05-28T07:03:56.540011Z","iopub.status.idle":"2024-05-28T07:03:56.566077Z","shell.execute_reply.started":"2024-05-28T07:03:56.539977Z","shell.execute_reply":"2024-05-28T07:03:56.564982Z"},"trusted":true},"execution_count":68,"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"array([0.20434212, 0.07619351])"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error\n\ny_pred = model.predict(X_test)\nmean_squared_error(y_test, y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-05-28T07:04:07.912070Z","iopub.execute_input":"2024-05-28T07:04:07.913080Z","iopub.status.idle":"2024-05-28T07:04:07.938710Z","shell.execute_reply.started":"2024-05-28T07:04:07.913047Z","shell.execute_reply":"2024-05-28T07:04:07.937183Z"},"trusted":true},"execution_count":69,"outputs":[{"execution_count":69,"output_type":"execute_result","data":{"text/plain":"157445.032087312"},"metadata":{}}]},{"cell_type":"code","source":"y_pred[0]","metadata":{"execution":{"iopub.status.busy":"2024-05-28T07:04:33.757813Z","iopub.execute_input":"2024-05-28T07:04:33.758631Z","iopub.status.idle":"2024-05-28T07:04:33.765348Z","shell.execute_reply.started":"2024-05-28T07:04:33.758593Z","shell.execute_reply":"2024-05-28T07:04:33.764157Z"},"trusted":true},"execution_count":70,"outputs":[{"execution_count":70,"output_type":"execute_result","data":{"text/plain":"172.3417963167738"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\nrf_regressor = RandomForestRegressor()\nrf_regressor.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nmean_squared_error(y_test, y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-05-28T07:06:18.821838Z","iopub.execute_input":"2024-05-28T07:06:18.822878Z","iopub.status.idle":"2024-05-28T07:06:23.723112Z","shell.execute_reply.started":"2024-05-28T07:06:18.822839Z","shell.execute_reply":"2024-05-28T07:06:23.721462Z"},"trusted":true},"execution_count":71,"outputs":[{"execution_count":71,"output_type":"execute_result","data":{"text/plain":"157445.032087312"},"metadata":{}}]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1)  \n])\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')","metadata":{"execution":{"iopub.status.busy":"2024-05-28T07:14:34.999985Z","iopub.execute_input":"2024-05-28T07:14:35.000954Z","iopub.status.idle":"2024-05-28T07:14:35.047185Z","shell.execute_reply.started":"2024-05-28T07:14:35.000918Z","shell.execute_reply":"2024-05-28T07:14:35.046063Z"},"trusted":true},"execution_count":76,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:86: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"}]},{"cell_type":"code","source":"early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n\n\nhistory = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2, callbacks=[early_stopping])\nloss = model.evaluate(X_test, y_test)\nprint('Test Loss:', loss)","metadata":{"execution":{"iopub.status.busy":"2024-05-28T07:14:36.458186Z","iopub.execute_input":"2024-05-28T07:14:36.458905Z","iopub.status.idle":"2024-05-28T07:16:01.952906Z","shell.execute_reply.started":"2024-05-28T07:14:36.458870Z","shell.execute_reply":"2024-05-28T07:16:01.951714Z"},"trusted":true},"execution_count":77,"outputs":[{"name":"stdout","text":"Epoch 1/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 129960.9062 - val_loss: 40370.8672\nEpoch 2/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 90092.8359 - val_loss: 42070.5039\nEpoch 3/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 118855.9062 - val_loss: 40216.5117\nEpoch 4/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 115317.3359 - val_loss: 40229.7383\nEpoch 5/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 79112.6875 - val_loss: 40233.9258\nEpoch 6/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 55303.9844 - val_loss: 40405.7422\nEpoch 7/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 170267.7812 - val_loss: 40298.7305\nEpoch 8/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 97384.6719 - val_loss: 40186.0117\nEpoch 9/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 63029.8281 - val_loss: 40473.6641\nEpoch 10/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 88312.2891 - val_loss: 40429.8438\nEpoch 11/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 95072.1484 - val_loss: 40061.4883\nEpoch 12/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 69762.6250 - val_loss: 41223.7070\nEpoch 13/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 175715.1094 - val_loss: 40325.9375\nEpoch 14/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 84769.1953 - val_loss: 40134.3945\nEpoch 15/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 77349.0703 - val_loss: 40077.4414\nEpoch 16/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 119507.6328 - val_loss: 40063.0703\nEpoch 17/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 138148.5781 - val_loss: 45445.6641\nEpoch 18/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 134129.0938 - val_loss: 39991.1094\nEpoch 19/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 59259.1445 - val_loss: 41576.9766\nEpoch 20/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 80730.3750 - val_loss: 40062.3008\nEpoch 21/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 113204.3906 - val_loss: 40040.3008\nEpoch 22/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 203189.0938 - val_loss: 40254.7383\nEpoch 23/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 106661.5781 - val_loss: 39992.7070\nEpoch 24/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 185330.0625 - val_loss: 40026.6836\nEpoch 25/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 131642.2031 - val_loss: 40226.4102\nEpoch 26/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 157585.6875 - val_loss: 40126.7617\nEpoch 27/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 85721.2969 - val_loss: 40075.1680\nEpoch 28/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 107203.9922 - val_loss: 40280.7266\n\u001b[1m852/852\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - loss: 68558.3750\nTest Loss: 157079.171875\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}