{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8521316,"sourceType":"datasetVersion","datasetId":5087976}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-29T06:08:51.884907Z","iopub.execute_input":"2024-05-29T06:08:51.885315Z","iopub.status.idle":"2024-05-29T06:08:53.108885Z","shell.execute_reply.started":"2024-05-29T06:08:51.885277Z","shell.execute_reply":"2024-05-29T06:08:53.107608Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/airbnb-london-listings-data/listings.csv\n/kaggle/input/airbnb-london-listings-data/listings 2.csv\n/kaggle/input/airbnb-london-listings-data/reviews 2.csv\n/kaggle/input/airbnb-london-listings-data/reviews.csv\n/kaggle/input/airbnb-london-listings-data/neighbourhoods.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"listings = pd.read_csv('/kaggle/input/airbnb-london-listings-data/listings.csv')\nlistings2 = pd.read_csv('/kaggle/input/airbnb-london-listings-data/listings 2.csv')\nreviews = pd.read_csv('/kaggle/input/airbnb-london-listings-data/reviews.csv')\nreviews2 = pd.read_csv('/kaggle/input/airbnb-london-listings-data/reviews 2.csv')","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:09:14.119928Z","iopub.execute_input":"2024-05-29T06:09:14.120494Z","iopub.status.idle":"2024-05-29T06:09:39.050740Z","shell.execute_reply.started":"2024-05-29T06:09:14.120457Z","shell.execute_reply":"2024-05-29T06:09:39.049385Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"listings.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:09:39.052674Z","iopub.execute_input":"2024-05-29T06:09:39.053095Z","iopub.status.idle":"2024-05-29T06:09:39.062373Z","shell.execute_reply.started":"2024-05-29T06:09:39.053025Z","shell.execute_reply":"2024-05-29T06:09:39.060732Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"(90857, 18)"},"metadata":{}}]},{"cell_type":"code","source":"listings.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:09:46.710791Z","iopub.execute_input":"2024-05-29T06:09:46.711236Z","iopub.status.idle":"2024-05-29T06:09:46.791858Z","shell.execute_reply.started":"2024-05-29T06:09:46.711201Z","shell.execute_reply":"2024-05-29T06:09:46.790662Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 90857 entries, 0 to 90856\nData columns (total 18 columns):\n #   Column                          Non-Null Count  Dtype  \n---  ------                          --------------  -----  \n 0   id                              90857 non-null  int64  \n 1   name                            90857 non-null  object \n 2   host_id                         90857 non-null  int64  \n 3   host_name                       90847 non-null  object \n 4   neighbourhood_group             0 non-null      float64\n 5   neighbourhood                   90857 non-null  object \n 6   latitude                        90857 non-null  float64\n 7   longitude                       90857 non-null  float64\n 8   room_type                       90857 non-null  object \n 9   price                           57888 non-null  float64\n 10  minimum_nights                  90857 non-null  int64  \n 11  number_of_reviews               90857 non-null  int64  \n 12  last_review                     65872 non-null  object \n 13  reviews_per_month               65872 non-null  float64\n 14  calculated_host_listings_count  90857 non-null  int64  \n 15  availability_365                90857 non-null  int64  \n 16  number_of_reviews_ltm           90857 non-null  int64  \n 17  license                         0 non-null      float64\ndtypes: float64(6), int64(7), object(5)\nmemory usage: 12.5+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"numeric_cols = listings.select_dtypes(include=[np.number])\nmissing_percentage = numeric_cols.isnull().mean() * 100\nfor column, percentage in missing_percentage.items():\n    print(f\"Average proportion of missing values in {column}: {round(percentage,2)}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:09:49.561295Z","iopub.execute_input":"2024-05-29T06:09:49.561737Z","iopub.status.idle":"2024-05-29T06:09:49.574236Z","shell.execute_reply.started":"2024-05-29T06:09:49.561701Z","shell.execute_reply":"2024-05-29T06:09:49.572987Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Average proportion of missing values in id: 0.0%\nAverage proportion of missing values in host_id: 0.0%\nAverage proportion of missing values in neighbourhood_group: 100.0%\nAverage proportion of missing values in latitude: 0.0%\nAverage proportion of missing values in longitude: 0.0%\nAverage proportion of missing values in price: 36.29%\nAverage proportion of missing values in minimum_nights: 0.0%\nAverage proportion of missing values in number_of_reviews: 0.0%\nAverage proportion of missing values in reviews_per_month: 27.5%\nAverage proportion of missing values in calculated_host_listings_count: 0.0%\nAverage proportion of missing values in availability_365: 0.0%\nAverage proportion of missing values in number_of_reviews_ltm: 0.0%\nAverage proportion of missing values in license: 100.0%\n","output_type":"stream"}]},{"cell_type":"code","source":"numeric_df = listings.select_dtypes(include='number')\ncorrelation_matrix = numeric_df.corr()\nfeature_target_corr = correlation_matrix['price'].sort_values(ascending=False)\nprint(feature_target_corr)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:09:57.445963Z","iopub.execute_input":"2024-05-29T06:09:57.447088Z","iopub.status.idle":"2024-05-29T06:09:57.500982Z","shell.execute_reply.started":"2024-05-29T06:09:57.447020Z","shell.execute_reply":"2024-05-29T06:09:57.499903Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"price                             1.000000\ncalculated_host_listings_count    0.061232\navailability_365                  0.039736\nminimum_nights                    0.024373\nlatitude                         -0.002465\nhost_id                          -0.013628\nid                               -0.014612\nlongitude                        -0.034916\nnumber_of_reviews                -0.043198\nreviews_per_month                -0.052799\nnumber_of_reviews_ltm            -0.062066\nneighbourhood_group                    NaN\nlicense                                NaN\nName: price, dtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n\nimputer = SimpleImputer(strategy='mean')\n\nlistings['price'] = imputer.fit_transform(listings[['price']])\n\nlistings.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:17:53.584777Z","iopub.execute_input":"2024-05-29T06:17:53.585227Z","iopub.status.idle":"2024-05-29T06:17:53.727098Z","shell.execute_reply.started":"2024-05-29T06:17:53.585193Z","shell.execute_reply":"2024-05-29T06:17:53.725887Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 90857 entries, 0 to 90856\nData columns (total 18 columns):\n #   Column                          Non-Null Count  Dtype  \n---  ------                          --------------  -----  \n 0   id                              90857 non-null  int64  \n 1   name                            90857 non-null  object \n 2   host_id                         90857 non-null  int64  \n 3   host_name                       90847 non-null  object \n 4   neighbourhood_group             0 non-null      float64\n 5   neighbourhood                   90857 non-null  object \n 6   latitude                        90857 non-null  float64\n 7   longitude                       90857 non-null  float64\n 8   room_type                       90857 non-null  object \n 9   price                           90857 non-null  float64\n 10  minimum_nights                  90857 non-null  int64  \n 11  number_of_reviews               90857 non-null  int64  \n 12  last_review                     65872 non-null  object \n 13  reviews_per_month               65872 non-null  float64\n 14  calculated_host_listings_count  90857 non-null  int64  \n 15  availability_365                90857 non-null  int64  \n 16  number_of_reviews_ltm           90857 non-null  int64  \n 17  license                         0 non-null      float64\ndtypes: float64(6), int64(7), object(5)\nmemory usage: 12.5+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"X = listings[['calculated_host_listings_count', 'availability_365']]\n\ny = listings['price'].values\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nprint(X_train.shape)\nprint(y_train.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:18:22.976150Z","iopub.execute_input":"2024-05-29T06:18:22.976555Z","iopub.status.idle":"2024-05-29T06:18:22.993551Z","shell.execute_reply.started":"2024-05-29T06:18:22.976527Z","shell.execute_reply":"2024-05-29T06:18:22.992312Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"(63599, 2)\n(63599,)\n","output_type":"stream"}]},{"cell_type":"code","source":"model = LinearRegression()\nmodel.fit(X_train, y_train)\nmodel.coef_","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:18:24.001188Z","iopub.execute_input":"2024-05-29T06:18:24.001678Z","iopub.status.idle":"2024-05-29T06:18:24.042421Z","shell.execute_reply.started":"2024-05-29T06:18:24.001646Z","shell.execute_reply":"2024-05-29T06:18:24.041020Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"array([0.20434212, 0.07619351])"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error\n\ny_pred = model.predict(X_test)\nmean_squared_error(y_test, y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:18:28.886179Z","iopub.execute_input":"2024-05-29T06:18:28.886608Z","iopub.status.idle":"2024-05-29T06:18:28.900531Z","shell.execute_reply.started":"2024-05-29T06:18:28.886579Z","shell.execute_reply":"2024-05-29T06:18:28.899116Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"157445.032087312"},"metadata":{}}]},{"cell_type":"code","source":"y_pred[0]","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:18:31.099511Z","iopub.execute_input":"2024-05-29T06:18:31.099943Z","iopub.status.idle":"2024-05-29T06:18:31.107691Z","shell.execute_reply.started":"2024-05-29T06:18:31.099900Z","shell.execute_reply":"2024-05-29T06:18:31.106387Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"172.3417963167738"},"metadata":{}}]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1)  \n])\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:18:42.015955Z","iopub.execute_input":"2024-05-29T06:18:42.016410Z","iopub.status.idle":"2024-05-29T06:18:57.418733Z","shell.execute_reply.started":"2024-05-29T06:18:42.016377Z","shell.execute_reply":"2024-05-29T06:18:57.417560Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stderr","text":"2024-05-29 06:18:44.335101: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-05-29 06:18:44.335274: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-05-29 06:18:44.511673: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:86: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"}]},{"cell_type":"code","source":"early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n\n\nhistory = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2, callbacks=[early_stopping])\nloss = model.evaluate(X_test, y_test)\nprint('Test Loss:', loss)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:18:59.412604Z","iopub.execute_input":"2024-05-29T06:18:59.413598Z","iopub.status.idle":"2024-05-29T06:20:25.579188Z","shell.execute_reply.started":"2024-05-29T06:18:59.413550Z","shell.execute_reply":"2024-05-29T06:20:25.577819Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Epoch 1/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 82454.6797 - val_loss: 40889.5742\nEpoch 2/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 116222.7188 - val_loss: 40193.6797\nEpoch 3/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 107496.1094 - val_loss: 40277.8555\nEpoch 4/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 87463.8750 - val_loss: 40059.2617\nEpoch 5/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 200552.9844 - val_loss: 40629.8516\nEpoch 6/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 130344.1953 - val_loss: 41012.5156\nEpoch 7/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 209305.7969 - val_loss: 40678.9453\nEpoch 8/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 70151.6016 - val_loss: 40035.8398\nEpoch 9/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 76699.2031 - val_loss: 40118.4766\nEpoch 10/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 132450.5156 - val_loss: 40103.5078\nEpoch 11/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 76520.5312 - val_loss: 40026.2578\nEpoch 12/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 108724.8359 - val_loss: 40086.2930\nEpoch 13/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 70278.1953 - val_loss: 55377.7109\nEpoch 14/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 72071.2109 - val_loss: 40553.3047\nEpoch 15/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 81649.8047 - val_loss: 40292.1680\nEpoch 16/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 186526.0625 - val_loss: 40173.8867\nEpoch 17/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 173687.7656 - val_loss: 39963.6406\nEpoch 18/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 68030.3047 - val_loss: 40006.9609\nEpoch 19/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 66355.2734 - val_loss: 40143.8867\nEpoch 20/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 82523.1250 - val_loss: 40180.1680\nEpoch 21/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 76547.3906 - val_loss: 40165.7422\nEpoch 22/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 108367.9297 - val_loss: 40032.4844\nEpoch 23/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 114475.0000 - val_loss: 40214.5664\nEpoch 24/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 181095.7344 - val_loss: 40316.3086\nEpoch 25/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 133681.8750 - val_loss: 40223.7617\nEpoch 26/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 236336.2969 - val_loss: 40291.3164\nEpoch 27/100\n\u001b[1m1590/1590\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 61136.5742 - val_loss: 40037.1953\n\u001b[1m852/852\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - loss: 68518.9219\nTest Loss: 157072.171875\n","output_type":"stream"}]},{"cell_type":"code","source":"listings['room_type'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:36:35.596913Z","iopub.execute_input":"2024-05-29T06:36:35.597400Z","iopub.status.idle":"2024-05-29T06:36:35.624286Z","shell.execute_reply.started":"2024-05-29T06:36:35.597358Z","shell.execute_reply":"2024-05-29T06:36:35.622725Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"room_type\nEntire home/apt    57263\nPrivate room       32954\nShared room          459\nHotel room           181\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"listings['neighbourhood'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:21:34.400384Z","iopub.execute_input":"2024-05-29T06:21:34.400835Z","iopub.status.idle":"2024-05-29T06:21:34.427741Z","shell.execute_reply.started":"2024-05-29T06:21:34.400800Z","shell.execute_reply":"2024-05-29T06:21:34.426474Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"neighbourhood\nWestminster               10246\nTower Hamlets              7257\nHackney                    6280\nCamden                     5948\nKensington and Chelsea     5944\nSouthwark                  5084\nLambeth                    4900\nIslington                  4873\nWandsworth                 4681\nHammersmith and Fulham     3897\nBrent                      2902\nLewisham                   2668\nNewham                     2437\nHaringey                   2423\nBarnet                     2287\nEaling                     2219\nGreenwich                  2027\nWaltham Forest             1840\nCroydon                    1579\nMerton                     1513\nHounslow                   1320\nRichmond upon Thames       1269\nRedbridge                   937\nHillingdon                  876\nEnfield                     837\nBromley                     824\nKingston upon Thames        683\nBarking and Dagenham        634\nBexley                      565\nHarrow                      551\nCity of London              542\nHavering                    436\nSutton                      378\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import OneHotEncoder, StandardScaler\n\nencoder = OneHotEncoder(sparse=False)\nencoded_category1 = encoder.fit_transform(listings[['neighbourhood']])\nencoded_category2 = encoder.fit_transform(listings[['room_type']])\n\nscaler = StandardScaler()\n\nscaled_numerical =  scaler.fit_transform(listings[['calculated_host_listings_count', 'availability_365']])\n\nX = np.hstack([encoded_category1, encoded_category2, scaled_numerical])\ny = listings['price'].values\n\nprint(X.shape)\nprint(y.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:44:00.838103Z","iopub.execute_input":"2024-05-29T06:44:00.838620Z","iopub.status.idle":"2024-05-29T06:44:00.986145Z","shell.execute_reply.started":"2024-05-29T06:44:00.838583Z","shell.execute_reply":"2024-05-29T06:44:00.984849Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"(90857, 39)\n(90857,)\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Build the neural network model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1)  # Output layer\n])\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# Define early stopping callback\nearly_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n\n# Train the model\nhistory = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2, callbacks=[early_stopping])\n\n# Evaluate the model on the test data\nloss = model.evaluate(X_test, y_test)\nprint('Test Loss:', loss)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:44:03.183124Z","iopub.execute_input":"2024-05-29T06:44:03.183567Z","iopub.status.idle":"2024-05-29T06:47:17.819250Z","shell.execute_reply.started":"2024-05-29T06:44:03.183533Z","shell.execute_reply":"2024-05-29T06:47:17.817932Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"Epoch 1/100\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:86: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 139312.2812 - val_loss: 36568.1680\nEpoch 2/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 191911.1719 - val_loss: 38803.5469\nEpoch 3/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 247445.0781 - val_loss: 36524.8320\nEpoch 4/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 71855.6562 - val_loss: 36405.6367\nEpoch 5/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 102718.4375 - val_loss: 36300.1602\nEpoch 6/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 110342.8438 - val_loss: 36241.6523\nEpoch 7/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 88524.0078 - val_loss: 36229.7969\nEpoch 8/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 323085.8750 - val_loss: 36272.7266\nEpoch 9/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 96900.8125 - val_loss: 38748.4180\nEpoch 10/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 280864.7188 - val_loss: 36434.6328\nEpoch 11/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 187899.2188 - val_loss: 36205.5391\nEpoch 12/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 115427.6562 - val_loss: 36263.4023\nEpoch 13/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 94283.8438 - val_loss: 36249.5391\nEpoch 14/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 188806.7969 - val_loss: 36077.8984\nEpoch 15/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 120938.7344 - val_loss: 36079.8047\nEpoch 16/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 159942.3438 - val_loss: 36128.4883\nEpoch 17/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 138018.8594 - val_loss: 36233.5664\nEpoch 18/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 99342.0625 - val_loss: 36062.1797\nEpoch 19/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 153207.9531 - val_loss: 36066.4453\nEpoch 20/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 157230.1875 - val_loss: 35989.3203\nEpoch 21/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 96519.5000 - val_loss: 35982.2617\nEpoch 22/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 87344.4375 - val_loss: 36307.4609\nEpoch 23/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 153624.4375 - val_loss: 35941.5195\nEpoch 24/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 193877.1094 - val_loss: 36010.2422\nEpoch 25/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 154213.8750 - val_loss: 36020.4453\nEpoch 26/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 177491.9531 - val_loss: 35872.8945\nEpoch 27/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 343669.3125 - val_loss: 35889.4062\nEpoch 28/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 149439.4062 - val_loss: 36761.9492\nEpoch 29/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 131136.8281 - val_loss: 35868.0000\nEpoch 30/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 266283.6875 - val_loss: 35892.6719\nEpoch 31/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 220490.0938 - val_loss: 36096.4219\nEpoch 32/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 250978.0156 - val_loss: 35790.3086\nEpoch 33/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 102257.5859 - val_loss: 36806.4531\nEpoch 34/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 166024.6562 - val_loss: 35781.5391\nEpoch 35/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 149574.3281 - val_loss: 35738.7617\nEpoch 36/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 75913.8594 - val_loss: 36191.1719\nEpoch 37/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 97575.8906 - val_loss: 36529.0078\nEpoch 38/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 245285.3125 - val_loss: 35832.0156\nEpoch 39/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 136668.4844 - val_loss: 35803.3203\nEpoch 40/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 143288.8906 - val_loss: 35741.3477\nEpoch 41/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 183950.1094 - val_loss: 35783.8867\nEpoch 42/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 250148.3125 - val_loss: 35724.3281\nEpoch 43/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 282281.5000 - val_loss: 35803.6406\nEpoch 44/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 98905.8984 - val_loss: 35776.3789\nEpoch 45/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 218737.0312 - val_loss: 35611.4570\nEpoch 46/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 208853.4219 - val_loss: 35691.7578\nEpoch 47/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 196963.7500 - val_loss: 35863.0742\nEpoch 48/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 168645.6562 - val_loss: 35713.4023\nEpoch 49/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 72318.1484 - val_loss: 37909.4336\nEpoch 50/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 71918.6406 - val_loss: 36732.2227\nEpoch 51/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 145357.4219 - val_loss: 35614.2109\nEpoch 52/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 163712.5469 - val_loss: 35657.1719\nEpoch 53/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 109660.5391 - val_loss: 35673.2109\nEpoch 54/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 186756.6562 - val_loss: 35688.1406\nEpoch 55/100\n\u001b[1m1818/1818\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 150905.2344 - val_loss: 35681.8242\n\u001b[1m568/568\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - loss: 36893.7383\nTest Loss: 34506.11328125\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\ny_pred = model.predict(X_test).flatten()\nresiduals = y_test - y_pred\nprint(y_test.shape)\nprint(y_pred.shape)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:55:15.750023Z","iopub.execute_input":"2024-05-29T06:55:15.750468Z","iopub.status.idle":"2024-05-29T06:55:16.721789Z","shell.execute_reply.started":"2024-05-29T06:55:15.750433Z","shell.execute_reply":"2024-05-29T06:55:16.720610Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"\u001b[1m568/568\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step\n(18172,)\n(18172,)\n","output_type":"stream"}]},{"cell_type":"code","source":"y_pred","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:55:18.639820Z","iopub.execute_input":"2024-05-29T06:55:18.640262Z","iopub.status.idle":"2024-05-29T06:55:18.648433Z","shell.execute_reply.started":"2024-05-29T06:55:18.640226Z","shell.execute_reply":"2024-05-29T06:55:18.647097Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"array([ 57.582848, 153.73001 , 290.13043 , ..., 185.04857 ,  53.234013,\n       180.42346 ], dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nplt.scatter(y_test, residuals)\nplt.axhline(y=0, color='r', linestyle='--')\nplt.xlabel('True Values')\nplt.ylabel('Residuals')\nplt.title('Residuals vs True Values')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:55:20.227144Z","iopub.execute_input":"2024-05-29T06:55:20.227575Z","iopub.status.idle":"2024-05-29T06:55:20.600523Z","shell.execute_reply.started":"2024-05-29T06:55:20.227540Z","shell.execute_reply":"2024-05-29T06:55:20.599333Z"},"trusted":true},"execution_count":42,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"mean_underprediction = np.mean(residuals[residuals < 0])\nprint(f'Mean Underprediction: {mean_underprediction}')","metadata":{"execution":{"iopub.status.busy":"2024-05-29T06:56:10.681422Z","iopub.execute_input":"2024-05-29T06:56:10.682305Z","iopub.status.idle":"2024-05-29T06:56:10.689199Z","shell.execute_reply.started":"2024-05-29T06:56:10.682259Z","shell.execute_reply":"2024-05-29T06:56:10.687869Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"Mean Underprediction: -59.869741422402775\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\nX = listings[['neighbourhood', 'room_type', 'calculated_host_listings_count', 'availability_365']]\ny = listings['price']\n\nnumeric_features = ['calculated_host_listings_count', 'availability_365']\nnumeric_transformer = Pipeline(steps=[\n    ('scaler', StandardScaler())\n])\n\ncategorical_features = ['neighbourhood', 'room_type']\ncategorical_transformer = Pipeline(steps=[\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Column transformer to apply the transformations\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)\n    ])\n\n# Define the model\nmodel = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))\n])\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Generate predictions\ny_pred = model.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T07:04:39.404093Z","iopub.execute_input":"2024-05-29T07:04:39.404568Z","iopub.status.idle":"2024-05-29T07:09:01.644591Z","shell.execute_reply.started":"2024-05-29T07:04:39.404534Z","shell.execute_reply":"2024-05-29T07:09:01.643274Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"mse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(f'Mean Squared Error: {mse}')\nprint(f'R-squared: {r2}')\n\n# Residual analysis\nresiduals = y_test - y_pred\n\nplt.figure(figsize=(10, 6))\nplt.scatter(y_test, residuals)\nplt.axhline(y=0, color='r', linestyle='--')\nplt.xlabel('True Values')\nplt.ylabel('Residuals')\nplt.title('Residuals vs True Values')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T07:27:13.030791Z","iopub.execute_input":"2024-05-29T07:27:13.033194Z","iopub.status.idle":"2024-05-29T07:27:13.386256Z","shell.execute_reply.started":"2024-05-29T07:27:13.033139Z","shell.execute_reply":"2024-05-29T07:27:13.384846Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"Mean Squared Error: 45121.12014534064\nR-squared: -0.1563274119613094\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}