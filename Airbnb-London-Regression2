{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8521316,"sourceType":"datasetVersion","datasetId":5087976}],"dockerImageVersionId":30715,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-31T06:13:22.628038Z","iopub.execute_input":"2024-05-31T06:13:22.628476Z","iopub.status.idle":"2024-05-31T06:13:23.833183Z","shell.execute_reply.started":"2024-05-31T06:13:22.628438Z","shell.execute_reply":"2024-05-31T06:13:23.831958Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/airbnb-london-listings-data/listings.csv\n/kaggle/input/airbnb-london-listings-data/listings 2.csv\n/kaggle/input/airbnb-london-listings-data/reviews 2.csv\n/kaggle/input/airbnb-london-listings-data/reviews.csv\n/kaggle/input/airbnb-london-listings-data/neighbourhoods.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"listings2 = pd.read_csv('/kaggle/input/airbnb-london-listings-data/listings 2.csv')\nreviews2 = pd.read_csv('/kaggle/input/airbnb-london-listings-data/reviews 2.csv')","metadata":{"execution":{"iopub.status.busy":"2024-05-31T06:14:20.024007Z","iopub.execute_input":"2024-05-31T06:14:20.025044Z","iopub.status.idle":"2024-05-31T06:14:44.508867Z","shell.execute_reply.started":"2024-05-31T06:14:20.025004Z","shell.execute_reply":"2024-05-31T06:14:44.507629Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"listings2.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T06:15:41.253816Z","iopub.execute_input":"2024-05-31T06:15:41.254268Z","iopub.status.idle":"2024-05-31T06:15:41.625056Z","shell.execute_reply.started":"2024-05-31T06:15:41.254234Z","shell.execute_reply":"2024-05-31T06:15:41.623766Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 90852 entries, 0 to 90851\nData columns (total 75 columns):\n #   Column                                        Non-Null Count  Dtype  \n---  ------                                        --------------  -----  \n 0   id                                            90852 non-null  int64  \n 1   listing_url                                   90852 non-null  object \n 2   scrape_id                                     90852 non-null  int64  \n 3   last_scraped                                  90852 non-null  object \n 4   source                                        90852 non-null  object \n 5   name                                          90852 non-null  object \n 6   description                                   87851 non-null  object \n 7   neighborhood_overview                         47521 non-null  object \n 8   picture_url                                   90842 non-null  object \n 9   host_id                                       90852 non-null  int64  \n 10  host_url                                      90852 non-null  object \n 11  host_name                                     90847 non-null  object \n 12  host_since                                    90847 non-null  object \n 13  host_location                                 70566 non-null  object \n 14  host_about                                    46814 non-null  object \n 15  host_response_time                            57797 non-null  object \n 16  host_response_rate                            57797 non-null  object \n 17  host_acceptance_rate                          65213 non-null  object \n 18  host_is_superhost                             90463 non-null  object \n 19  host_thumbnail_url                            90847 non-null  object \n 20  host_picture_url                              90847 non-null  object \n 21  host_neighbourhood                            46955 non-null  object \n 22  host_listings_count                           90847 non-null  float64\n 23  host_total_listings_count                     90847 non-null  float64\n 24  host_verifications                            90847 non-null  object \n 25  host_has_profile_pic                          90847 non-null  object \n 26  host_identity_verified                        90847 non-null  object \n 27  neighbourhood                                 47522 non-null  object \n 28  neighbourhood_cleansed                        90852 non-null  object \n 29  neighbourhood_group_cleansed                  0 non-null      float64\n 30  latitude                                      90852 non-null  float64\n 31  longitude                                     90852 non-null  float64\n 32  property_type                                 90852 non-null  object \n 33  room_type                                     90852 non-null  object \n 34  accommodates                                  90852 non-null  int64  \n 35  bathrooms                                     57894 non-null  float64\n 36  bathrooms_text                                90722 non-null  object \n 37  bedrooms                                      78118 non-null  float64\n 38  beds                                          57837 non-null  float64\n 39  amenities                                     90852 non-null  object \n 40  price                                         57885 non-null  object \n 41  minimum_nights                                90852 non-null  int64  \n 42  maximum_nights                                90852 non-null  int64  \n 43  minimum_minimum_nights                        90851 non-null  float64\n 44  maximum_minimum_nights                        90851 non-null  float64\n 45  minimum_maximum_nights                        90851 non-null  float64\n 46  maximum_maximum_nights                        90851 non-null  float64\n 47  minimum_nights_avg_ntm                        90851 non-null  float64\n 48  maximum_nights_avg_ntm                        90851 non-null  float64\n 49  calendar_updated                              0 non-null      float64\n 50  has_availability                              86773 non-null  object \n 51  availability_30                               90852 non-null  int64  \n 52  availability_60                               90852 non-null  int64  \n 53  availability_90                               90852 non-null  int64  \n 54  availability_365                              90852 non-null  int64  \n 55  calendar_last_scraped                         90852 non-null  object \n 56  number_of_reviews                             90852 non-null  int64  \n 57  number_of_reviews_ltm                         90852 non-null  int64  \n 58  number_of_reviews_l30d                        90852 non-null  int64  \n 59  first_review                                  65869 non-null  object \n 60  last_review                                   65869 non-null  object \n 61  review_scores_rating                          65869 non-null  float64\n 62  review_scores_accuracy                        65838 non-null  float64\n 63  review_scores_cleanliness                     65843 non-null  float64\n 64  review_scores_checkin                         65808 non-null  float64\n 65  review_scores_communication                   65833 non-null  float64\n 66  review_scores_location                        65808 non-null  float64\n 67  review_scores_value                           65806 non-null  float64\n 68  license                                       0 non-null      float64\n 69  instant_bookable                              90852 non-null  object \n 70  calculated_host_listings_count                90852 non-null  int64  \n 71  calculated_host_listings_count_entire_homes   90852 non-null  int64  \n 72  calculated_host_listings_count_private_rooms  90852 non-null  int64  \n 73  calculated_host_listings_count_shared_rooms   90852 non-null  int64  \n 74  reviews_per_month                             65869 non-null  float64\ndtypes: float64(24), int64(17), object(34)\nmemory usage: 52.0+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"listings2['price']","metadata":{"execution":{"iopub.status.busy":"2024-05-31T06:16:05.989634Z","iopub.execute_input":"2024-05-31T06:16:05.990050Z","iopub.status.idle":"2024-05-31T06:16:06.001315Z","shell.execute_reply.started":"2024-05-31T06:16:05.990020Z","shell.execute_reply":"2024-05-31T06:16:05.999954Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"0        $160.00\n1         $65.00\n2        $120.00\n3         $65.00\n4        $100.00\n          ...   \n90847    $225.00\n90848    $225.00\n90849    $314.00\n90850    $610.00\n90851    $150.00\nName: price, Length: 90852, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"listings2['price'] = listings2['price'].str.replace('$', '')\nlistings2['price'] = listings2['price'].str.replace(',', '')\nlistings2['price'] = listings2['price'].astype(float)\nlistings2['price']","metadata":{"execution":{"iopub.status.busy":"2024-05-31T06:16:24.333198Z","iopub.execute_input":"2024-05-31T06:16:24.333732Z","iopub.status.idle":"2024-05-31T06:16:24.438960Z","shell.execute_reply.started":"2024-05-31T06:16:24.333674Z","shell.execute_reply":"2024-05-31T06:16:24.437535Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"0        160.0\n1         65.0\n2        120.0\n3         65.0\n4        100.0\n         ...  \n90847    225.0\n90848    225.0\n90849    314.0\n90850    610.0\n90851    150.0\nName: price, Length: 90852, dtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"numeric_df = listings2.select_dtypes(include='number')\ncorrelation_matrix = numeric_df.corr()\nfeature_target_corr = correlation_matrix['price'].sort_values(ascending=False)\nprint(feature_target_corr)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T06:17:37.237073Z","iopub.execute_input":"2024-05-31T06:17:37.237507Z","iopub.status.idle":"2024-05-31T06:17:37.711020Z","shell.execute_reply.started":"2024-05-31T06:17:37.237474Z","shell.execute_reply":"2024-05-31T06:17:37.709567Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"price                                           1.000000\naccommodates                                    0.224339\nbedrooms                                        0.216521\nbathrooms                                       0.194058\nbeds                                            0.182681\ncalculated_host_listings_count_entire_homes     0.063854\nhost_listings_count                             0.063673\ncalculated_host_listings_count                  0.061228\nhost_total_listings_count                       0.060005\nreview_scores_location                          0.043837\navailability_365                                0.039731\navailability_60                                 0.037660\navailability_30                                 0.036568\navailability_90                                 0.031562\nminimum_minimum_nights                          0.028977\nminimum_nights                                  0.024370\nminimum_nights_avg_ntm                          0.022189\nreview_scores_cleanliness                       0.013177\nreview_scores_rating                            0.012337\nmaximum_minimum_nights                          0.010191\nreview_scores_accuracy                          0.006419\nmaximum_nights_avg_ntm                          0.005480\nmaximum_maximum_nights                          0.005480\nminimum_maximum_nights                          0.005479\nreview_scores_checkin                           0.001314\nreview_scores_communication                    -0.000168\nmaximum_nights                                 -0.001451\nlatitude                                       -0.002488\nreview_scores_value                            -0.003103\ncalculated_host_listings_count_private_rooms   -0.004551\ncalculated_host_listings_count_shared_rooms    -0.006713\nhost_id                                        -0.013626\nid                                             -0.014611\nlongitude                                      -0.034911\nnumber_of_reviews                              -0.043202\nnumber_of_reviews_l30d                         -0.050539\nreviews_per_month                              -0.052806\nnumber_of_reviews_ltm                          -0.062072\nscrape_id                                            NaN\nneighbourhood_group_cleansed                         NaN\ncalendar_updated                                     NaN\nlicense                                              NaN\nName: price, dtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(strategy='mean')\n\nlistings2['price'] = imputer.fit_transform(listings2[['price']])\nlistings2['accommodates'] = imputer.fit_transform(listings2[['accommodates']])\nlistings2['bathrooms'] = imputer.fit_transform(listings2[['bathrooms']])\nlistings2['beds'] = imputer.fit_transform(listings2[['beds']])\n\nlistings2.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T06:19:11.509994Z","iopub.execute_input":"2024-05-31T06:19:11.510421Z","iopub.status.idle":"2024-05-31T06:19:12.795136Z","shell.execute_reply.started":"2024-05-31T06:19:11.510382Z","shell.execute_reply":"2024-05-31T06:19:12.793720Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 90852 entries, 0 to 90851\nData columns (total 75 columns):\n #   Column                                        Non-Null Count  Dtype  \n---  ------                                        --------------  -----  \n 0   id                                            90852 non-null  int64  \n 1   listing_url                                   90852 non-null  object \n 2   scrape_id                                     90852 non-null  int64  \n 3   last_scraped                                  90852 non-null  object \n 4   source                                        90852 non-null  object \n 5   name                                          90852 non-null  object \n 6   description                                   87851 non-null  object \n 7   neighborhood_overview                         47521 non-null  object \n 8   picture_url                                   90842 non-null  object \n 9   host_id                                       90852 non-null  int64  \n 10  host_url                                      90852 non-null  object \n 11  host_name                                     90847 non-null  object \n 12  host_since                                    90847 non-null  object \n 13  host_location                                 70566 non-null  object \n 14  host_about                                    46814 non-null  object \n 15  host_response_time                            57797 non-null  object \n 16  host_response_rate                            57797 non-null  object \n 17  host_acceptance_rate                          65213 non-null  object \n 18  host_is_superhost                             90463 non-null  object \n 19  host_thumbnail_url                            90847 non-null  object \n 20  host_picture_url                              90847 non-null  object \n 21  host_neighbourhood                            46955 non-null  object \n 22  host_listings_count                           90847 non-null  float64\n 23  host_total_listings_count                     90847 non-null  float64\n 24  host_verifications                            90847 non-null  object \n 25  host_has_profile_pic                          90847 non-null  object \n 26  host_identity_verified                        90847 non-null  object \n 27  neighbourhood                                 47522 non-null  object \n 28  neighbourhood_cleansed                        90852 non-null  object \n 29  neighbourhood_group_cleansed                  0 non-null      float64\n 30  latitude                                      90852 non-null  float64\n 31  longitude                                     90852 non-null  float64\n 32  property_type                                 90852 non-null  object \n 33  room_type                                     90852 non-null  object \n 34  accommodates                                  90852 non-null  float64\n 35  bathrooms                                     90852 non-null  float64\n 36  bathrooms_text                                90722 non-null  object \n 37  bedrooms                                      78118 non-null  float64\n 38  beds                                          90852 non-null  float64\n 39  amenities                                     90852 non-null  object \n 40  price                                         90852 non-null  float64\n 41  minimum_nights                                90852 non-null  int64  \n 42  maximum_nights                                90852 non-null  int64  \n 43  minimum_minimum_nights                        90851 non-null  float64\n 44  maximum_minimum_nights                        90851 non-null  float64\n 45  minimum_maximum_nights                        90851 non-null  float64\n 46  maximum_maximum_nights                        90851 non-null  float64\n 47  minimum_nights_avg_ntm                        90851 non-null  float64\n 48  maximum_nights_avg_ntm                        90851 non-null  float64\n 49  calendar_updated                              0 non-null      float64\n 50  has_availability                              86773 non-null  object \n 51  availability_30                               90852 non-null  int64  \n 52  availability_60                               90852 non-null  int64  \n 53  availability_90                               90852 non-null  int64  \n 54  availability_365                              90852 non-null  int64  \n 55  calendar_last_scraped                         90852 non-null  object \n 56  number_of_reviews                             90852 non-null  int64  \n 57  number_of_reviews_ltm                         90852 non-null  int64  \n 58  number_of_reviews_l30d                        90852 non-null  int64  \n 59  first_review                                  65869 non-null  object \n 60  last_review                                   65869 non-null  object \n 61  review_scores_rating                          65869 non-null  float64\n 62  review_scores_accuracy                        65838 non-null  float64\n 63  review_scores_cleanliness                     65843 non-null  float64\n 64  review_scores_checkin                         65808 non-null  float64\n 65  review_scores_communication                   65833 non-null  float64\n 66  review_scores_location                        65808 non-null  float64\n 67  review_scores_value                           65806 non-null  float64\n 68  license                                       0 non-null      float64\n 69  instant_bookable                              90852 non-null  object \n 70  calculated_host_listings_count                90852 non-null  int64  \n 71  calculated_host_listings_count_entire_homes   90852 non-null  int64  \n 72  calculated_host_listings_count_private_rooms  90852 non-null  int64  \n 73  calculated_host_listings_count_shared_rooms   90852 non-null  int64  \n 74  reviews_per_month                             65869 non-null  float64\ndtypes: float64(26), int64(16), object(33)\nmemory usage: 52.0+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"listings2['neighbourhood_cleansed'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T06:19:47.946552Z","iopub.execute_input":"2024-05-31T06:19:47.947452Z","iopub.status.idle":"2024-05-31T06:19:47.975260Z","shell.execute_reply.started":"2024-05-31T06:19:47.947410Z","shell.execute_reply":"2024-05-31T06:19:47.973951Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"neighbourhood_cleansed\nWestminster               10246\nTower Hamlets              7256\nHackney                    6279\nCamden                     5948\nKensington and Chelsea     5944\nSouthwark                  5084\nLambeth                    4900\nIslington                  4873\nWandsworth                 4681\nHammersmith and Fulham     3897\nBrent                      2902\nLewisham                   2668\nNewham                     2437\nHaringey                   2422\nBarnet                     2287\nEaling                     2219\nGreenwich                  2027\nWaltham Forest             1840\nCroydon                    1578\nMerton                     1513\nHounslow                   1320\nRichmond upon Thames       1269\nRedbridge                   937\nHillingdon                  876\nEnfield                     837\nBromley                     824\nKingston upon Thames        683\nBarking and Dagenham        634\nBexley                      565\nHarrow                      551\nCity of London              542\nHavering                    436\nSutton                      377\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import OneHotEncoder, StandardScaler\n\nencoder = OneHotEncoder(sparse=False)\nencoded_category1 = encoder.fit_transform(listings2[['neighbourhood_cleansed']])\n#encoded_category2 = encoder.fit_transform(listings2[['host_is_superhost']])\n\nscaler = StandardScaler()\n\nscaled_numerical =  scaler.fit_transform(listings2[['accommodates', 'bathrooms']])\n\nX = np.hstack([encoded_category1, scaled_numerical])\ny = listings2['price'].values\n\nprint(X.shape)\nprint(y.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T06:26:45.860366Z","iopub.execute_input":"2024-05-31T06:26:45.860823Z","iopub.status.idle":"2024-05-31T06:26:45.936598Z","shell.execute_reply.started":"2024-05-31T06:26:45.860787Z","shell.execute_reply":"2024-05-31T06:26:45.935363Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"(90852, 35)\n(90852,)\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Build the neural network model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1)  # Output layer\n])\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# Define early stopping callback\nearly_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n\n# Train the model\nhistory = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2, callbacks=[early_stopping])\n\n# Evaluate the model on the test data\nloss = model.evaluate(X_test, y_test)\nprint('Test Loss:', loss)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T06:26:47.215879Z","iopub.execute_input":"2024-05-31T06:26:47.216304Z","iopub.status.idle":"2024-05-31T06:28:48.345758Z","shell.execute_reply.started":"2024-05-31T06:26:47.216275Z","shell.execute_reply":"2024-05-31T06:28:48.344577Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Epoch 1/100\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 153900.7188 - val_loss: 223760.5469\nEpoch 2/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 110131.2109 - val_loss: 223549.9219\nEpoch 3/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 71257.5703 - val_loss: 223614.3906\nEpoch 4/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 62840.6914 - val_loss: 223100.2812\nEpoch 5/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 48332.0625 - val_loss: 222951.4688\nEpoch 6/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 171400.2500 - val_loss: 222927.8125\nEpoch 7/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 59050.9883 - val_loss: 222609.1094\nEpoch 8/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 75560.7812 - val_loss: 222069.6562\nEpoch 9/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 73777.3203 - val_loss: 222061.5000\nEpoch 10/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 77140.8906 - val_loss: 222345.8906\nEpoch 11/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 67127.8516 - val_loss: 221896.0625\nEpoch 12/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 101021.1562 - val_loss: 221865.3750\nEpoch 13/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 78823.2344 - val_loss: 221700.7500\nEpoch 14/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 160798.4375 - val_loss: 222217.0938\nEpoch 15/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 70311.5938 - val_loss: 222338.6562\nEpoch 16/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 50423.9766 - val_loss: 222104.0938\nEpoch 17/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 78400.3672 - val_loss: 221434.8438\nEpoch 18/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 156043.6719 - val_loss: 221665.8750\nEpoch 19/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 73046.0234 - val_loss: 221406.7500\nEpoch 20/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 56615.2930 - val_loss: 221612.2812\nEpoch 21/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 401799.8438 - val_loss: 221772.1094\nEpoch 22/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 45355.6055 - val_loss: 222442.5625\nEpoch 23/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 100858.2188 - val_loss: 221871.5625\nEpoch 24/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 53996.8984 - val_loss: 221649.4688\nEpoch 25/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 66650.4922 - val_loss: 221411.9688\nEpoch 26/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 41827.2227 - val_loss: 221945.4375\nEpoch 27/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 122296.6875 - val_loss: 221236.2188\nEpoch 28/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 68173.1875 - val_loss: 221529.8750\nEpoch 29/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 87655.4219 - val_loss: 221335.1250\nEpoch 30/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 62711.2812 - val_loss: 221428.4062\nEpoch 31/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 66497.4453 - val_loss: 221567.6875\nEpoch 32/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 157368.3750 - val_loss: 222403.5938\nEpoch 33/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 73922.0781 - val_loss: 221574.1406\nEpoch 34/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 64431.6250 - val_loss: 222514.0625\nEpoch 35/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 261603.5625 - val_loss: 221519.1719\nEpoch 36/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 77108.5859 - val_loss: 221489.0625\nEpoch 37/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 60732.6094 - val_loss: 221623.0156\n\u001b[1m568/568\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - loss: 51233.2305\nTest Loss: 58227.484375\n","output_type":"stream"}]},{"cell_type":"code","source":"# Select the column to check for missing values\ncolumn_name = 'host_is_superhost'\n\n# Create a boolean mask indicating where values are missing\nmissing_mask = listings2[column_name].isnull()\n\n# Use the mask to select the rows with missing values and convert to a Series\nmissing_values_with_indexes = listings2.loc[missing_mask, column_name]\n\n# Display the result\nprint(missing_values_with_indexes)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T07:01:15.955896Z","iopub.execute_input":"2024-05-31T07:01:15.956347Z","iopub.status.idle":"2024-05-31T07:01:15.975951Z","shell.execute_reply.started":"2024-05-31T07:01:15.956314Z","shell.execute_reply":"2024-05-31T07:01:15.974481Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"977      NaN\n3043     NaN\n4528     NaN\n4789     NaN\n6020     NaN\n        ... \n89303    NaN\n89346    NaN\n89426    NaN\n89792    NaN\n90739    NaN\nName: host_is_superhost, Length: 389, dtype: object\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"DataFrame shape:\", listings2.shape)\nprint(\"Column to impute:\", column_to_impute)\nprint(\"Unique values in column:\", listings2[column_to_impute].unique())\nprint(\"NaN values count in column:\", listings2[column_to_impute].isnull().sum())\n\n# Check the input data type and shape\nprint(\"Input data type:\", type(listings2[[column_to_impute]]))\nprint(\"Input data shape:\", listings2[[column_to_impute]].shape)\n\n# Check the first few rows of the input data\nprint(\"First few rows of input data:\")\nprint(listings2[[column_to_impute]].head())\n","metadata":{"execution":{"iopub.status.busy":"2024-05-31T07:06:07.574361Z","iopub.execute_input":"2024-05-31T07:06:07.574858Z","iopub.status.idle":"2024-05-31T07:06:07.619793Z","shell.execute_reply.started":"2024-05-31T07:06:07.574825Z","shell.execute_reply":"2024-05-31T07:06:07.618746Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"DataFrame shape: (90852, 75)\nColumn to impute: host_is_superhost\nUnique values in column: ['t' 'f' nan]\nNaN values count in column: 389\nInput data type: <class 'pandas.core.frame.DataFrame'>\nInput data shape: (90852, 1)\nFirst few rows of input data:\n  host_is_superhost\n0                 t\n1                 t\n2                 f\n3                 t\n4                 t\n","output_type":"stream"}]},{"cell_type":"code","source":"# Convert 't' and 'f' to 1 and 0 respectively\nlistings2['host_is_superhost'] = listings2['host_is_superhost'].map({'t': 1, 'f': 0})\n\n# Now, the column contains numerical values and NaNs\n# We can use numerical imputation strategies\n\nfrom sklearn.impute import SimpleImputer\n\n# Create a SimpleImputer instance with the strategy 'mean', 'median', or 'constant'\nimputer = SimpleImputer(strategy='mean') \n\n# Impute the missing values in the 'host_is_superhost' column\nlistings2['host_is_superhost'] = imputer.fit_transform(listings2[['host_is_superhost']])","metadata":{"execution":{"iopub.status.busy":"2024-05-31T07:09:04.362180Z","iopub.execute_input":"2024-05-31T07:09:04.362656Z","iopub.status.idle":"2024-05-31T07:09:04.388386Z","shell.execute_reply.started":"2024-05-31T07:09:04.362620Z","shell.execute_reply":"2024-05-31T07:09:04.387003Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\nX = listings2[['neighbourhood_cleansed', 'bathrooms', 'host_is_superhost']]\ny = listings2['price']\n\n\n# Preprocessing pipelines for both numeric and categorical data\nnumeric_features = ['bathrooms', 'host_is_superhost']\n# Assuming numerical features are already imputed and scaled, otherwise, use the following:\nnumeric_transformer = Pipeline(steps=[\n    ('scaler', StandardScaler())\n])\n\n# Preprocessing for encoding categorical features\ncategorical_features = ['neighbourhood_cleansed']\ncategorical_transformer = OneHotEncoder(handle_unknown='ignore')\n\n# Column transformer to apply the transformations\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)\n    ])\n\n# Apply the transformations to the entire dataset\nX_processed = preprocessor.fit_transform(X)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T07:10:14.795859Z","iopub.execute_input":"2024-05-31T07:10:14.796272Z","iopub.status.idle":"2024-05-31T07:10:14.866349Z","shell.execute_reply.started":"2024-05-31T07:10:14.796243Z","shell.execute_reply":"2024-05-31T07:10:14.865162Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=0.2, random_state=42)\n\n# Build the neural network model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1)  # Output layer\n])\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# Define early stopping callback\nearly_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n\n# Train the model\nhistory = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2, callbacks=[early_stopping])\n\n# Evaluate the model on the test data\nloss = model.evaluate(X_test, y_test)\nprint('Test Loss:', loss)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T07:10:44.611953Z","iopub.execute_input":"2024-05-31T07:10:44.612369Z","iopub.status.idle":"2024-05-31T07:12:49.213333Z","shell.execute_reply.started":"2024-05-31T07:10:44.612335Z","shell.execute_reply":"2024-05-31T07:12:49.211862Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 113109.0469 - val_loss: 225196.9375\nEpoch 2/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 76001.0938 - val_loss: 225021.8750\nEpoch 3/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 99073.9141 - val_loss: 224918.2344\nEpoch 4/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 52809.1562 - val_loss: 224540.0469\nEpoch 5/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 88489.2500 - val_loss: 224708.1719\nEpoch 6/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 86904.4766 - val_loss: 224024.5156\nEpoch 7/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 205309.3750 - val_loss: 224150.5625\nEpoch 8/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 241569.7344 - val_loss: 224175.1875\nEpoch 9/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 66802.3281 - val_loss: 223961.7344\nEpoch 10/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 275356.5000 - val_loss: 223485.5312\nEpoch 11/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 94187.8125 - val_loss: 223381.5312\nEpoch 12/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 103721.0312 - val_loss: 224233.7031\nEpoch 13/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 70235.3984 - val_loss: 223954.0781\nEpoch 14/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 99821.7344 - val_loss: 223329.3906\nEpoch 15/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 81813.8516 - val_loss: 223310.2656\nEpoch 16/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 153865.8750 - val_loss: 225183.8281\nEpoch 17/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 120847.3047 - val_loss: 223706.0000\nEpoch 18/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 126125.8438 - val_loss: 223232.4375\nEpoch 19/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 325024.9688 - val_loss: 224007.7031\nEpoch 20/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 75060.6562 - val_loss: 223283.0625\nEpoch 21/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 94902.6328 - val_loss: 222881.4688\nEpoch 22/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 69731.0859 - val_loss: 223090.5312\nEpoch 23/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 67114.9062 - val_loss: 223759.4062\nEpoch 24/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 78594.2969 - val_loss: 223298.7812\nEpoch 25/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 156459.2500 - val_loss: 223544.1719\nEpoch 26/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 53550.3281 - val_loss: 223302.8750\nEpoch 27/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 121131.8125 - val_loss: 223686.4375\nEpoch 28/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 71980.9844 - val_loss: 223114.7656\nEpoch 29/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 139229.8750 - val_loss: 223064.3125\nEpoch 30/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 91443.2188 - val_loss: 223175.9531\nEpoch 31/100\n\u001b[1m1817/1817\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 69916.2656 - val_loss: 223204.5625\n\u001b[1m568/568\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - loss: 54705.2031\nTest Loss: 60738.41796875\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}